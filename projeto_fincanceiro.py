# -*- coding: utf-8 -*-
"""Projeto_Fincanceiro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHODYBm4u5_CO3A-cyyrvCulsAtWWCvD

# *Projeto 1 - Relatório de fechamento de mercado por e-mail.*

**Desafio:
Construir um e-mail que chegue na caixa de entrada todos os dias com informações de fechamento do Ibovespa e dólar.**

*Passo a passo:*

Passo 1 - Importar os módulos e bibliotecas.

Passo 2 - Pegar dados do Ibovespa e do Dólar no Yahoo Finance.

Passo 3 - Manipular os dados para deixá-los nos formatos necessários para fazer as contas.

Passo 4 - Calcular o retorno diário, mensal e anual.

Passo 5 - Localizar, dentro das tabelas de retornos, os valores de fechamento de mercado que irão pro texto anexado no e-mail.

Passo 6 - Fazer os gráficos dos ativos.

Passo 7 - Enviar o e-mail
"""

import pandas as pd

!pip install python-dotenv

!pip install mplcyberpunk

!pip install yfinance==0.1.74

"""# ***Passo 1 - Importando os módulos necessários***


"""

import pandas as pd #Principal para analise de dados
import datetime # Lida com datas
import yfinance as yf # baixar as cotações
from matplotlib import pyplot as plt #Realiza os graficos
import mplcyberpunk # estilização de grafico
import smtplib #Conseguir enviar o email
from email.message import EmailMessage #Conseguir enviar o email

"""# ***Passo 2 - Pegar dados do Yahoo Finance***"""

ativos = ['^BVSP', 'BRL=X'] # Código das cotações

hoje = datetime.datetime.now()
um_ano_atras = hoje - datetime.timedelta(days = 365)

dados_mercado = yf.download(ativos, um_ano_atras, hoje)

display(dados_mercado)

"""# ***Passo 3.1 - Manipulando os Dados***"""

dados_mercado['Adj Close']['^BVSP']

dados_fechamento = dados_mercado ['Adj Close']
dados_fechamento.columns = ['dolar', 'ibovespa']

dados_fechamento = dados_fechamento.dropna()

dados_fechamento

"""# ***Passo 3.2 - Manipulando os dados***"""

dados_fechamento_mensal = dados_fechamento.resample('M').last()
#Na linha acima é transformado em uma tabela a última cotação de cada mes
#Utilizando funções

dados_fechamento_anual = dados_fechamento.resample('Y').last()
#Na linha acima é transformado em uma tabela a última cotação de cada ano




dados_fechamento_anual

"""# ***Passo 4 - Calcular fechamento do dia, do mês e ano***"""

retorno_no_ano = dados_fechamento_anual.pct_change().dropna()

retorno_no_mes = dados_fechamento_mensal.pct_change().dropna()

retorno_no_dia = dados_fechamento.pct_change().dropna()

retorno_no_dia

retorno_no_ano

retorno_no_mes

"""# ***Passo 5 - Localizar o fechamento do dia anterior, retorno no mês e retorno no ano.***


Loc -> Referenciar elementos a partir do nome

Iloc -> Selecionar elementos como uma matriz
"""

retorno_no_dia.loc['2023-03-09', 'dolar']

retorno_no_dia.loc['2023-03-09']

retorno_no_dia.iloc[0, 0] #Devolve primeira linha e primeira coluna

retorno_dia_dolar = retorno_no_dia.iloc[-1, 0]
retorno_dia_ibovespa = retorno_no_dia.iloc[-1, 1]

retorno_mes_dolar = retorno_no_mes.iloc[-1, 0]
retorno_mes_ibovespa = retorno_no_mes.iloc[-1, 1]

retorno_ano_dolar = retorno_no_ano.iloc[-1, 0]
retorno_ano_ibovespa = retorno_no_ano.iloc[-1, 1]

retorno_ano_dolar

#Realização do tratamento dos dados

retorno_dia_dolar = round(retorno_dia_dolar * 100, 2)
retorno_dia_ibovespa = round(retorno_dia_ibovespa / 100, 2)

retorno_mes_dolar = round(retorno_mes_dolar * 100, 2)
retorno_mes_ibovespa = round(retorno_mes_ibovespa * 100, 2)

retorno_ano_dolar = round(retorno_ano_dolar * 100, 2)
retorno_ano_ibovespa = round(retorno_ano_ibovespa * 100, 2)

retorno_ano_ibovespa

"""Passo 6"""

plt.style.use('cyberpunk')

dados_fechamento.plot(y = 'ibovespa', use_index = True, legend = False)

plt.title('Ibovespa') #Título do gráfico

plt.savefig('ibovespa.png', dpi = 300) #Salvando o gráfico

plt.show()

plt.style.use('cyberpunk')

dados_fechamento.plot(y = 'dolar', use_index = True, legend = False)

plt.title('dolar')

plt.savefig('dolar.png', dpi = 300)

plt.show()

"""# ***Passo 7 - Enviando o E-mail***

Utilizar isso: https://myaccount.google.com/apppasswords
"""

import os #importar essa biblioteca para conseguir logar
from dotenv import load_dotenv

load_dotenv() # Aqui posiciona se a senha foi salva

senha = os.environ.get('senha_email')
email = 'seu@email.com.br'

msg = EmailMessage()

msg['subject'] = 'Enviando e-mail com o python'
msg['from'] = 'seu@email.com.br'
msg['to'] = 'email@dapessoa.com.br'

msg.set_content(f'''Prezado Cliente, segue o relatório diário do mercado:

Bolsa:

No ano o Ibovespa está tendo uma rentabilidade de {retorno_ano_ibovespa}%, 
enquanto no mês a rentabilidade é de {retorno_mes_ibovespa}%.

No último dia útil, o fechamento do Ibovespa foi de {retorno_dia_ibovespa}%.

Dólar:

No ano o Dólar está tendo uma rentabilidade de {retorno_ano_dolar}%, 
enquanto no mês a rentabilidade é de {retorno_mes_dolar}%.

No último dia útil, o fechamento do Dólar foi de {retorno_dia_dolar}%.


Abs,

Fernando

''')

with open('dolar.png', 'rb') as content_file:
    content = content_file.read()
    msg.add_attachment(content, maintype='application', subtype='png', filename='dolar.png')

with open('ibovespa.png', 'rb') as content_file:
    content = content_file.read()
    msg.add_attachment(content, maintype='application', subtype='png', filename='ibovespa.png')

with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
    
    smtp.login(email, senha)
    smtp.send_message(msg)